<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
</head>
<body>
    <%- include('../views/headers.ejs') %>

    <div class="container-fluid">
        <h2>Transaction List</h2>

        <div class="table-responsive mb-5">
            <table class="table table-striped table-bordered">
                <thead>
                    <tr>
                        <th>Order ID <input type="text" id="order_number" oninput="applyFilters()"></th>
                        <th>Shipping Date</th>
                        <th>Name <input type="text" id="billing_first_name" oninput="applyFilters()"></th>
                        <th>Surname <input type="text" id="billing_last_name" oninput="applyFilters()"></th>
                        <th>Branch</th>
                        <th>Order Woo Status</th>
                        <th>Auth Amount <input type="number" id="amount" oninput="applyFilters()"></th>
                        <th>Final Amount <input type="number" id="order_total" oninput="applyFilters()"></th>
                        <th>Amt to Refund <input type="number" id="tot_refund_amt" oninput="applyFilters()"></th>
                        <th>Cash to Collect</th>
                        <th>Payment Link</th>
                        <th>Amt to Capture <input type="number" id="tot_capture_amt" oninput="applyFilters()"></th>
                        <th>TotCapture Amount</th>
                        <th>Total Refunded</th>
                        <th>MID</th>
                        <th>Woo Payment Method</th>
                        <th>GHL Payment</th>
                        <th>Status</th>
                        <th>State</th>
                        <th>Remarks</th>
                        <th>GHL Acquirer</th>
                        <th>Issuing Bank</th>
                        <th>DMS Amount</th>
                        <th>Variance</th>
                        <th>DMS Date</th>
                        <th>Difference in Date</th>
                    </tr>
                </thead>
                <tbody id="transactionsTable">
                    
                </tbody>
            </table>
        </div>

        <!-- Load More Button -->
        <div class="text-center">
            <button id="loadMoreBtn" onclick="loadMore()" style="display: none;" class="btn btn-primary">Load More</button>
        </div>

    </div>

    <script>
        let currentPage = 1;
        let filters = {};

        async function fetchTransactions(page = 1, append = false) {
            try {

                let url = `/api/txn?page=${page}`;

                let queryParams = [];
                if (filters.order_number) queryParams.push(`order_number=${encodeURIComponent(filters.order_number)}`);
                if (filters.billing_first_name) queryParams.push(`billing_first_name=${encodeURIComponent(filters.billing_first_name)}`);
                if (filters.billing_last_name) queryParams.push(`billing_last_name=${encodeURIComponent(filters.billing_last_name)}`);
                if (filters.amount) queryParams.push(`amount=${encodeURIComponent(filters.amount)}`);
                if (filters.order_total) queryParams.push(`order_total=${encodeURIComponent(filters.order_total)}`);
                if (filters.tot_refund_amt) queryParams.push(`tot_refund_amt=${encodeURIComponent(filters.tot_refund_amt)}`);
                if (filters.tot_capture_amt) queryParams.push(`tot_capture_amt=${encodeURIComponent(filters.tot_capture_amt)}`);

                if (queryParams.length > 0) {
                    url += `&${queryParams.join("&")}`;
                }
                console.log("Fetching data from:", url); // Debugging

                //let queryParams = new URLSearchParams({ page, ...filters }).toString();
                let response = await axios.get(url);
                let transactions = response.data.transactions;

                console.log(transactions);

                if (!append) {
                    document.getElementById("transactionsTable").innerHTML = ""; // Clear table if not appending
                }

                transactions.forEach(transaction => {
                    let CashToCollect = transaction.order_total - transaction.amount;
                    let row = `
                        <tr>
                            <td>${transaction.order_number}</td>
                            <td>${new Date(transaction.date_created).toLocaleDateString('en-US')}</td>
                            <td>${transaction.billing_first_name}</td>
                            <td>${transaction.billing_last_name}</td>
                            <td>${transaction.location}</td>
                            <td>${transaction.order_status}</td>
                            <td>${transaction.amount}</td>
                            <td>${transaction.order_total}</td>
                            <td>${transaction.tot_refund_amt}</td>
                            <td>${CashToCollect > 0 ? CashToCollect.toFixed(2) : '0.00'}</td>
                            <td>${transaction.tot_refund_amt}</td>
                            <td>${transaction.tot_capture_amt}</td>
                            <td>${transaction.tot_refund_amt}</td>
                            <td>${transaction.tot_refund_amt}</td>
                            <td></td>
                            <td>${transaction.order_payment_method}</td>
                            <td></td>
                            <td>${transaction.status}</td>
                            <td>${transaction.state}</td>
                            <td></td>
                            <td>${transaction.acquirer}</td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                        </tr>`;
                    document.getElementById("transactionsTable").innerHTML += row;
                });

                currentPage = page;
                document.getElementById("loadMoreBtn").style.display = response.data.hasMore ? "block" : "none";

            } catch (error) {
                console.error("Error loading transactions:", error);
            }
        }

        function loadMore() {
            fetchTransactions(currentPage + 1, true);
        }

        function applyFilters() {
            // Collect filter values
            filters = {};
            let orderNumber = document.getElementById("order_number").value.trim();
            let firstName = document.getElementById("billing_first_name").value.trim();
            let lastName = document.getElementById("billing_last_name").value.trim();
            let amount = document.getElementById("amount").value.trim();
            let orderTotal = document.getElementById("order_total").value.trim();
            let totRefundAmt = document.getElementById("tot_refund_amt").value.trim();
            let totCaptureAmt = document.getElementById("tot_capture_amt").value.trim();

            // Only add filters if they are not empty
            if (orderNumber) filters.order_number = orderNumber;
            if (firstName) filters.billing_first_name = firstName;
            if (lastName) filters.billing_last_name = lastName;
            if (amount) filters.amount = amount;
            if (orderTotal) filters.order_total = orderTotal;
            if (totRefundAmt) filters.tot_refund_amt = totRefundAmt;
            if (totCaptureAmt) filters.tot_capture_amt = totCaptureAmt;

            console.log("Applying Filters:", filters); // Debugging

            // Fetch transactions with filters
            fetchTransactions(1, false);
        }

        // Load first set of transactions when the page loads
        fetchTransactions();
    </script>
</body>
</html>
